{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Water Tracker API",
    "description": "An API documentation for the Watter Tracker API application written on NodeJS",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multiplart/form-data"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://water-tracker-api.onrender.com/api",
      "description": "Production Server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Registration",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "required": ["email", "password", "timezone"] },
                  { "$ref": "#/components/schemas/UserRequest" }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MessageResponse" },
                    {
                      "example": {
                        "message": "User has been created and email verification has been sent"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "404": { "$ref": "#/components/responses/Error404" },
          "409": { "$ref": "#/components/responses/Error409" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/users/password/forgot": {
      "post": {
        "tags": ["Auth"],
        "summary": "Password Reset Eamil Request",
        "requestBody": {
          "description": "Password Reset object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "required": ["email"] },
                  { "$ref": "#/components/Models/User/Email" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MessageResponse" },
                    {
                      "example": {
                        "message": "Password reset was sent via email"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/users/password/reset/{token}": {
      "post": {
        "tags": ["Auth"],
        "summary": "Password Update with token from email",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Password Reset Token From Email",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "requestBody": {
          "description": "Password Update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "required": ["password"] },
                  { "$ref": "#/components/Models/User/Password" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Password Reset",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MessageResponse" },
                    {
                      "example": {
                        "message": "Password has been successfully reset"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/users/verify": {
      "post": {
        "tags": ["Auth"],
        "summary": "Resend Verification Email",
        "requestBody": {
          "description": "Email resend object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "required": ["email"] },
                  { "$ref": "#/components/Models/User/Email" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MessageResponse" },
                    {
                      "example": {
                        "message": "Email verification has been sent"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/users/verify/{token}": {
      "get": {
        "tags": ["Auth"],
        "summary": "Verify Email",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Verification Token From Email",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was verified",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MessageResponse" },
                    {
                      "example": {
                        "message": "Your email has been successfully verified"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login",
        "requestBody": {
          "description": "Login Request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "required": ["email", "password", "timezone"] },
                  { "$ref": "#/components/Models/User/Email" },
                  { "$ref": "#/components/Models/User/Password" },
                  { "$ref": "#/components/Models/User/Timezone" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout",
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": { "description": "No content" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get currently authenticated user with token",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      },
      "patch": {
        "security": [{ "Bearer": [] }],
        "tags": ["User"],
        "summary": "Update User",
        "requestBody": {
          "required": true,
          "description": "Update information about user",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/UserRequest" },
                  { "$ref": "#/components/Models/User/OldPassword" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "security": [{ "Bearer": [] }],
        "tags": ["User"],
        "summary": "Update User's Avatar",
        "requestBody": {
          "required": true,
          "description": "Update user's avatar",
          "content": {
            "multiplart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      },
      "delete": {
        "security": [{ "Bearer": [] }],
        "tags": ["User"],
        "summary": "Delete User's Avatar",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/water/goal": {
      "patch": {
        "security": [{ "Bearer": [] }],
        "tags": ["User"],
        "summary": "Update daily goal of water for user",
        "requestBody": {
          "required": true,
          "description": "Daily goal of water to drink",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "required": ["dailyWaterGoal"] },
                  { "$ref": "#/components/Models/User/DailyWaterGoal" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/water/consumption": {
      "post": {
        "tags": ["Water"],
        "summary": "Create a record of consumed water value",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Specify the amount and exact date and time of the record",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "required": ["value", "consumed_at"] },
                  { "$ref": "#/components/schemas/WaterRequest" }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaterResponse" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Error401" },
          "400": { "$ref": "#/components/responses/Error400" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      },
      "get": {
        "tags": ["Water"],
        "summary": "Get list of all water consumption records",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WaterResponse" }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/water/consumption/{id}": {
      "get": {
        "tags": ["Water"],
        "summary": "Get one record of consumed water by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of a consumption record",
            "schema": { "$ref": "#/components/Models/Water/Id/properties/id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaterResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      },
      "delete": {
        "tags": ["Water"],
        "summary": "Delete one record of consumed water by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of a consumption record",
            "schema": { "$ref": "#/components/Models/Water/Id/properties/id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaterResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      },
      "patch": {
        "tags": ["Water"],
        "summary": "Update one record of consumed water by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of a consumption record",
            "schema": { "$ref": "#/components/Models/Water/Id/properties/id" }
          }
        ],
        "requestBody": {
          "description": "Specify the amount and exact date and time of the record",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WaterRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WaterResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/water/today": {
      "get": {
        "tags": ["Water"],
        "summary": "Get water consumption statistic information for today",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/Models/WaterStatistics/ConsumptionPercentage"
                    },
                    {
                      "$ref": "#/components/Models/WaterStatistics/Consumption"
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/water/day/{date}": {
      "get": {
        "tags": ["Water"],
        "summary": "Get water consumption statistic information specific day",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "date",
            "required": true,
            "description": "Date and time in UTC",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/Models/WaterStatistics/ConsumptionPercentage"
                    },
                    {
                      "$ref": "#/components/Models/WaterStatistics/Consumption"
                    },
                    { "$ref": "#/components/Models/User/DailyWaterGoal" }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    },
    "/water/statistics/{startDateTime}/{endDateTime}": {
      "get": {
        "tags": ["Water"],
        "summary": "Get water consumption for date time range",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "startDateTime",
            "required": true,
            "description": "Start date and time in UTC",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "path",
            "name": "endDateTime",
            "required": true,
            "description": "End date and time in UTC",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/Models/WaterStatistics/Count" },
                    {
                      "$ref": "#/components/Models/WaterStatistics/TotalValue"
                    },
                    {
                      "$ref": "#/components/Models/WaterStatistics/ConsumptionPercentage"
                    },
                    { "$ref": "#/components/Models/User/DailyWaterGoal" },
                    { "$ref": "#/components/Models/WaterStatistics/Date" }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/Error400" },
          "401": { "$ref": "#/components/responses/Error401" },
          "404": { "$ref": "#/components/responses/Error404" },
          "500": { "$ref": "#/components/responses/Error500" }
        }
      }
    }
  },
  "components": {
    "Models": {
      "User": {
        "Name": {
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name"
            }
          }
        },
        "Email": {
          "properties": {
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            }
          }
        },
        "Password": {
          "properties": {
            "password": {
              "type": "string",
              "description": "User's password",
              "format": "password"
            }
          }
        },
        "OldPassword": {
          "properties": {
            "old_password": {
              "type": "string",
              "description": "User's old password",
              "format": "password"
            }
          }
        },
        "AvatarUrl": {
          "properties": {
            "avatarURL": {
              "type": "string",
              "description": "User's avarar",
              "format": "uri"
            }
          }
        },
        "Gender": {
          "properties": {
            "gender": {
              "type": "string",
              "description": "User's gender",
              "enum": ["man", "woman"]
            }
          }
        },
        "DailyWaterGoal": {
          "properties": {
            "dailyWaterGoal": {
              "type": "integer",
              "maximum": 15000,
              "minimum": 1,
              "default": 2000
            }
          }
        },
        "Timezone": {
          "properties": {
            "timezone": {
              "type": "string",
              "description": "User's timezone that the system will use for date interpretation",
              "example": "America/New_York"
            }
          }
        }
      },
      "Auth": {
        "Token": {
          "properties": {
            "token": {
              "type": "string",
              "description": "JWT Token for Bearer Auth",
              "format": "byte"
            }
          }
        }
      },
      "Water": {
        "Id": {
          "properties": {
            "id": {
              "type": "string",
              "format": "ObjectId",
              "description": "Unique identifier of the object",
              "example": "60fb18d743ff280015c4a06d"
            }
          }
        },
        "Value": {
          "properties": {
            "value": {
              "type": "integer",
              "maximum": 5000,
              "minimum": 1,
              "description": "Value in milliliters"
            }
          }
        },
        "ConsumedAt": {
          "properties": {
            "consumed_at": {
              "type": "string",
              "description": "At what time was the water drunk",
              "format": "date-time"
            }
          }
        }
      },
      "WaterStatistics": {
        "ConsumptionPercentage": {
          "properties": {
            "consumptionPercentage": {
              "type": "integer"
            }
          }
        },
        "Consumption": {
          "properties": {
            "consumption": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WaterResponse"
              }
            }
          }
        },
        "Count": {
          "properties": {
            "count": {
              "type": "integer"
            }
          }
        },
        "TotalValue": {
          "properties": {
            "totalValue": {
              "type": "integer"
            }
          }
        },
        "Date": {
          "properties": {
            "date": {
              "type": "string",
              "format": "date"
            }
          }
        }
      }
    },
    "schemas": {
      "UserRequest": {
        "allOf": [
          { "type": "object" },
          { "$ref": "#/components/Models/User/Email" },
          { "$ref": "#/components/Models/User/Password" },
          { "$ref": "#/components/Models/User/Gender" },
          { "$ref": "#/components/Models/User/Name" },
          { "$ref": "#/components/Models/User/DailyWaterGoal" },
          { "$ref": "#/components/Models/User/Timezone" }
        ]
      },
      "UserResponse": {
        "allOf": [
          { "type": "object" },
          { "$ref": "#/components/Models/User/Name" },
          { "$ref": "#/components/Models/User/Email" },
          { "$ref": "#/components/Models/User/AvatarUrl" },
          { "$ref": "#/components/Models/User/Gender" },
          { "$ref": "#/components/Models/User/DailyWaterGoal" },
          { "$ref": "#/components/Models/User/Timezone" }
        ]
      },
      "WaterRequest": {
        "allOf": [
          { "type": "object" },
          { "$ref": "#/components/Models/Water/Value" },
          { "$ref": "#/components/Models/Water/ConsumedAt" },
          { "$ref": "#/components/Models/User/DailyWaterGoal" }
        ]
      },
      "WaterResponse": {
        "allOf": [
          { "$ref": "#/components/Models/Water/Id" },
          { "$ref": "#/components/schemas/WaterRequest" }
        ]
      },
      "AuthResponse": {
        "allOf": [
          { "type": "object" },
          {
            "properties": {
              "user": { "$ref": "#/components/schemas/UserResponse" }
            }
          },
          { "$ref": "#/components/Models/Auth/Token" }
        ]
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          }
        },
        "example": {
          "message": "Example of a success message"
        }
      },
      "Error400": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        },
        "example": { "message": "\"email\" is required" }
      },
      "Error401": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        },
        "example": { "message": "Not authorized" }
      },
      "Error404": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        },
        "example": [
          { "message": "Route not found" },
          { "message": "Resource not found" }
        ]
      },
      "Error409": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        },
        "example": { "message": "Email is already in use" }
      },
      "Error500": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        },
        "example": { "message": "Internal Server Error" }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "Error400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error400" }
          }
        }
      },
      "Error401": {
        "description": "Not authorized",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error401" }
          }
        }
      },
      "Error404": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error404" }
          }
        }
      },
      "Error409": {
        "description": "Resource already exists",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error409" }
          }
        }
      },
      "Error500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error500" }
          }
        }
      }
    }
  }
}
